"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/bitcoint.ts":
/*!*****************************!*\
  !*** ./src/lib/bitcoint.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bitcoin: function() { return /* binding */ Bitcoin; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bitcoinjs-lib */ \"(app-pages-browser)/./node_modules/bitcoinjs-lib/src/index.js\");\n/* harmony import */ var _lib_kdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/kdf */ \"(app-pages-browser)/./src/lib/kdf.ts\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\n\n\n\nclass Bitcoin {\n    async deriveAddress(accountId, derivation_path) {\n        const publicKey = await (0,_lib_kdf__WEBPACK_IMPORTED_MODULE_1__.deriveChildPublicKey)((0,_lib_kdf__WEBPACK_IMPORTED_MODULE_1__.najPublicKeyStrToUncompressedHexPoint)(), accountId, derivation_path);\n        const address = await (0,_lib_kdf__WEBPACK_IMPORTED_MODULE_1__.uncompressedHexPointToBtcAddress)(publicKey, this.network);\n        return {\n            publicKey: Buffer.from(publicKey, \"hex\"),\n            address\n        };\n    }\n    async getBalance(address) {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"\".concat(this.chain_rpc, \"/address/\").concat(address, \"/utxo\"));\n        const balance = response.data.reduce((acc, utxo)=>acc + utxo.value, 0);\n        return balance;\n    }\n    async createPayload(sender, receiver, satoshis) {\n        const utxos = await this.fetchUTXOs(sender);\n        const feeRate = await this.fetchFeeRate();\n        const psbt = new bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_0__.Psbt({\n            network: this.network\n        });\n        let totalInput = 0;\n        await Promise.all(utxos.map(async (utxo)=>{\n            totalInput += utxo.value;\n            const transaction = await this.fetchTransaction(utxo.txid);\n            const inputOptions = transaction.outs[utxo.vout].script.includes(\"0014\") ? {\n                hash: utxo.txid,\n                index: utxo.vout,\n                witnessUtxo: {\n                    script: transaction.outs[utxo.vout].script,\n                    value: utxo.value\n                }\n            } : {\n                hash: utxo.txid,\n                index: utxo.vout,\n                nonWitnessUtxo: Buffer.from(transaction.toHex(), \"hex\")\n            };\n            psbt.addInput(inputOptions);\n        }));\n        psbt.addOutput({\n            address: receiver,\n            value: Number(satoshis)\n        });\n        const estimatedSize = utxos.length * 148 + 2 * 34 + 10;\n        const fee = Math.ceil(estimatedSize * (feeRate + 3));\n        const change = totalInput - Number(satoshis) - fee;\n        if (change > 0) {\n            psbt.addOutput({\n                address: sender,\n                value: change\n            });\n        }\n        return {\n            psbt,\n            utxos\n        };\n    }\n    async requestSignatureToMPC(wallet, contractId, path, btcPayload, publicKey) {\n        const { psbt, utxos } = btcPayload;\n        // Bitcoin needs to sign multiple utxos, so we need to pass a signer function\n        const sign = async (tx)=>{\n            const payload = Array.from(ethers__WEBPACK_IMPORTED_MODULE_3__.getBytes(tx)).reverse();\n            const [big_r, big_s] = await wallet.callMethod({\n                contractId,\n                method: \"sign\",\n                args: {\n                    payload,\n                    path,\n                    key_version: 0\n                },\n                gas: \"250000000000000\"\n            });\n            return this.reconstructSignature(big_r, big_s);\n        };\n        await Promise.all(utxos.map(async (_, index)=>{\n            await psbt.signInputAsync(index, {\n                publicKey,\n                sign\n            });\n        }));\n        psbt.finalizeAllInputs();\n        return psbt.extractTransaction().toHex();\n    }\n    reconstructSignature(big_r, big_s) {\n        const r = big_r.slice(2).padStart(64, \"0\");\n        const s = big_s.padStart(64, \"0\");\n        const rawSignature = Buffer.from(r + s, \"hex\");\n        if (rawSignature.length !== 64) {\n            throw new Error(\"Invalid signature length.\");\n        }\n        return rawSignature;\n    }\n    // This code can be used to actually relay the transaction to the Ethereum network\n    async relayTransaction(signedTransaction) {\n        let useProxy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        const proxy = useProxy ? \"https://corsproxy.io/?\" : \"\";\n        const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(proxy).concat(this.chain_rpc, \"/tx\"), signedTransaction);\n        return response.data;\n    }\n    /**\n   * Converts a value from satoshis to bitcoins.\n   *\n   * @param {number} satoshi - The amount in satoshis to convert.\n   * @returns {number} The equivalent amount in bitcoins.\n   */ static toBTC(satoshi) {\n        return satoshi / 100000000;\n    }\n    /**\n   * Converts a value from bitcoins to satoshis.\n   *\n   * @param {number} btc - The amount in bitcoins to convert.\n   * @returns {number} The equivalent amount in satoshis.\n   */ static toSatoshi(btc) {\n        return Number(btc * 100000000);\n    }\n    /**\n   * Fetches the current fee rate from the Bitcoin network.\n   * This method queries the RPC endpoint for fee estimates and returns the fee rate\n   * expected for a transaction to be confirmed within a certain number of blocks.\n   * The confirmation target is set to 6 blocks by default, which is commonly used\n   * for a balance between confirmation time and cost.\n   *\n   * @returns {Promise<number>} A promise that resolves to the fee rate in satoshis per byte.\n   * @throws {Error} Throws an error if the fee rate data for the specified confirmation target is missing.\n   */ async fetchFeeRate() {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"\".concat(this.chain_rpc, \"/fee-estimates\"));\n        const confirmationTarget = 6;\n        return response.data[confirmationTarget];\n    }\n    /**\n   * Fetches the Unspent Transaction Outputs (UTXOs) for a given Bitcoin address.\n   *\n   * @param {string} address - The Bitcoin address for which to fetch the UTXOs.\n   * @returns {Promise<Array<{ txid: string; vout: number; value: number }>>} A promise that resolves to an array of UTXOs.\n   * Each UTXO is represented as an object containing the transaction ID (`txid`), the output index within that transaction (`vout`),\n   * and the value of the output in satoshis (`value`).\n   */ async fetchUTXOs(address) {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"\".concat(this.chain_rpc, \"/address/\").concat(address, \"/utxo\"));\n        const utxos = response.data.map((utxo)=>({\n                txid: utxo.txid,\n                vout: utxo.vout,\n                value: utxo.value,\n                script: utxo.script\n            }));\n        return utxos;\n    }\n    /**\n   * Fetches a Bitcoin transaction by its ID and constructs a transaction object.\n   * This function retrieves the transaction details from the blockchain using the RPC endpoint,\n   * then parses the input and output data to construct a `bitcoin.Transaction` object.\n   *\n   * @param {string} transactionId - The ID of the transaction to fetch.\n   * @returns {Promise<bitcoin.Transaction>} A promise that resolves to a `bitcoin.Transaction` object representing the fetched transaction.\n   */ async fetchTransaction(transactionId) {\n        const { data } = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"\".concat(this.chain_rpc, \"/tx/\").concat(transactionId));\n        const tx = new bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n        tx.version = data.version;\n        tx.locktime = data.locktime;\n        data.vin.forEach((vin)=>{\n            const txHash = Buffer.from(vin.txid, \"hex\").reverse();\n            const vout = vin.vout;\n            const sequence = vin.sequence;\n            const scriptSig = vin.scriptsig ? Buffer.from(vin.scriptsig, \"hex\") : undefined;\n            tx.addInput(txHash, vout, sequence, scriptSig);\n        });\n        data.vout.forEach((vout)=>{\n            const value = vout.value;\n            const scriptPubKey = Buffer.from(vout.scriptpubkey, \"hex\");\n            tx.addOutput(scriptPubKey, value);\n        });\n        data.vin.forEach((vin, index)=>{\n            if (vin.witness && vin.witness.length > 0) {\n                const witness = vin.witness.map((w)=>Buffer.from(w, \"hex\"));\n                tx.setWitness(index, witness);\n            }\n        });\n        return tx;\n    }\n    /**\n   * Initializes a new instance of the `Bitcoin` class.\n   *\n   * @param {string} chain_rpc - The URL of the Bitcoin Core RPC endpoint.\n   * @param {string} network - The network to use. Either \"mainnet\" or \"testnet\".\n   */ constructor(chain_rpc, network){\n        this.chain_rpc = chain_rpc;\n        this.network = network === \"testnet\" ? bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_0__.networks.testnet : bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_0__.networks.bitcoin;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/bitcoint.ts\n"));

/***/ })

});